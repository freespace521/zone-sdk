apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
//apply plugin: 'com.novoda.bintray-release'//添加
// JitPack Maven
apply plugin: 'com.github.dcendents.android-maven'
// Your Group
group = 'com.github.luhaoaimama1'


dependencies {
    api fileTree(include: '*.jar', dir: 'libs')
    testImplementation 'junit:junit:4.12@jar'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'me.imid.swipebacklayout.lib:library:1.1.0'
    api 'com.google.code.gson:gson:2.8.2'
    api 'com.nineoldandroids:library:2.4.0'
    api 'com.android.support:appcompat-v7:28.0.0'
    api 'org.jetbrains:annotations-java5:15.0'
}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 14
//        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']

            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict load src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
//    packagingOptions {
//        exclude 'META-INF/LICENSE.txt'
//    }
}

//---------------jitPack 文档注释 Start------------------------
// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives sourcesJar
    archives javadocJar
}
// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}
//---------------jitPack 文档注释Over------------------------
